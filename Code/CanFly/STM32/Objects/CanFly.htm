<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\CanFly.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\CanFly.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jun 14 13:58:25 2023
<BR><P>
<H3>Maximum Stack Usage =        736 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM2_IRQHandler &rArr; CanFly_Calcu_Position &rArr; mpu_get_euler_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(.text.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from timer.o(.text.TIM2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(.text.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart.o(.text.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[35]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Parm_Config
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dcmpge</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ee]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ef]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[3e]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[47]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[dc]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[f1]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[5a]"></a>ADC_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text.ADC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[52]"></a>ADC_Config</STRONG> (Thumb, 268 bytes, Stack size 96 bytes, adc.o(.text.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ADC_Config &rArr; ADC_DeInit &rArr; RCC_APB2PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>ADC_DMACmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text.ADC_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[55]"></a>ADC_DeInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f10x_adc.o(.text.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_DeInit &rArr; RCC_APB2PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5e]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text.ADC_GetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5c]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text.ADC_GetResetCalibrationStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetResetCalibrationStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[56]"></a>ADC_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[58]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5b]"></a>ADC_ResetCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text.ADC_ResetCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_ResetCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5f]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text.ADC_SoftwareStartConvCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_SoftwareStartConvCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[5d]"></a>ADC_StartCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f10x_adc.o(.text.ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CanFly_Bat</STRONG> (Thumb, 444 bytes, Stack size 16 bytes, adc.o(.text.CanFly_Bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CanFly_Bat &rArr; __aeabi_dcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>CanFly_Calcu_Position</STRONG> (Thumb, 648 bytes, Stack size 112 bytes, mpu6050.o(.text.CanFly_Calcu_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = CanFly_Calcu_Position &rArr; mpu_get_euler_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6a]"></a>CanFly_Control</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, control.o(.text.CanFly_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = CanFly_Control &rArr; CanFly_PID_Call &rArr; PID_Postion_Cal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Pwm_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>CanFly_Decode</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, protocol.o(.text.CanFly_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CanFly_Decode &rArr; ano_data_decode &rArr; ano_data_check
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>CanFly_PID_Call</STRONG> (Thumb, 490 bytes, Stack size 56 bytes, control.o(.text.CanFly_PID_Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CanFly_PID_Call &rArr; PID_Postion_Cal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Limit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Postion_Cal
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Control
</UL>

<P><STRONG><a name="[74]"></a>CanFly_Upload</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, protocol.o(.text.CanFly_Upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CanFly_Upload &rArr; ano_data_make_euler_arc &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_flymode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_pwm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_rgb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_ctrl_euler_arc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_isensor
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>DELAY_Config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, delay.o(.text.DELAY_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DELAY_Config &rArr; SysTick_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>DMA_Cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text.DMA_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Decode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[ba]"></a>DMA_DeInit</STRONG> (Thumb, 440 bytes, Stack size 4 bytes, stm32f10x_dma.o(.text.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[6e]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, stm32f10x_dma.o(.text.DMA_GetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_GetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Decode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[60]"></a>DMA_Init</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[70]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text.DMA_SetCurrDataCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_SetCurrDataCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Decode
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>GPIO_Init</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, stm32f10x_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[8f]"></a>GPIO_ResetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text.GPIO_ResetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_SetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text.GPIO_SetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IIC_ACK</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, iic.o(.text.IIC_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IIC_ACK &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
</UL>

<P><STRONG><a name="[81]"></a>IIC_Config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, iic.o(.text.IIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IIC_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>IIC_DELAY</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, iic.o(.text.IIC_DELAY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SEND_BYTE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
</UL>

<P><STRONG><a name="[7f]"></a>IIC_HALF_DELAY</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, iic.o(.text.IIC_HALF_DELAY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IIC_HALF_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SEND_BYTE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WAIT_ACK
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_START
</UL>

<P><STRONG><a name="[83]"></a>IIC_NACK</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, iic.o(.text.IIC_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_NACK &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
</UL>

<P><STRONG><a name="[84]"></a>IIC_READ</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, iic.o(.text.IIC_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_READ &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SEND_BYTE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WAIT_ACK
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_START
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read
</UL>

<P><STRONG><a name="[8a]"></a>IIC_READ_BYTE</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, iic.o(.text.IIC_READ_BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_READ_BYTE &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_RECEIVE_BYTE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SEND_BYTE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WAIT_ACK
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_START
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
</UL>

<P><STRONG><a name="[88]"></a>IIC_RECEIVE_BYTE</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, iic.o(.text.IIC_RECEIVE_BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IIC_RECEIVE_BYTE &rArr; IIC_NACK &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NACK
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ACK
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
</UL>

<P><STRONG><a name="[86]"></a>IIC_SEND_BYTE</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, iic.o(.text.IIC_SEND_BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IIC_SEND_BYTE &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WRITE_BYTE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
</UL>

<P><STRONG><a name="[85]"></a>IIC_START</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iic.o(.text.IIC_START))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_START &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WRITE_BYTE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
</UL>

<P><STRONG><a name="[89]"></a>IIC_STOP</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, iic.o(.text.IIC_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WRITE_BYTE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WAIT_ACK
</UL>

<P><STRONG><a name="[87]"></a>IIC_WAIT_ACK</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, iic.o(.text.IIC_WAIT_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_HALF_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WRITE_BYTE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
</UL>

<P><STRONG><a name="[8b]"></a>IIC_WRITE_BYTE</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, iic.o(.text.IIC_WRITE_BYTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IIC_WRITE_BYTE &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SEND_BYTE
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WAIT_ACK
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_STOP
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_START
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
</UL>

<P><STRONG><a name="[8c]"></a>IO_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(.text.IO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_Config &rArr; RCC_APB2PeriphClockCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>IS_10HZ</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, tick.o(.text.IS_10HZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IS_10HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>IS_200HZ</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, tick.o(.text.IS_200HZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IS_200HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>IS_2HZ</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, tick.o(.text.IS_2HZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IS_2HZ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>LED_Blink</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, led.o(.text.LED_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Blink &rArr; GPIO_ResetBits
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>LED_Config</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, led.o(.text.LED_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>MPU_Config</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, mpu6050.o(.text.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_Config &rArr; mpu6050_offset &rArr; mpu_get_sensor_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_offset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_byte
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_byte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>Motor_Pwm_Set</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, pwm.o(.text.Motor_Pwm_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_Pwm_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Control
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>NVIC_Init</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, misc.o(.text.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, misc.o(.text.NVIC_PriorityGroupConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>PID_Parm_Config</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, pid.o(.text.PID_Parm_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PID_Parm_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>PID_Postion_Cal</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, pid.o(.text.PID_Postion_Cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PID_Postion_Cal &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
</UL>

<P><STRONG><a name="[9b]"></a>PWM_Config</STRONG> (Thumb, 298 bytes, Stack size 80 bytes, pwm.o(.text.PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PWM_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>PWM_Limit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, control.o(.text.PWM_Limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Limit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_PID_Call
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_ADCCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[53]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[9c]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[b1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_APB1PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[54]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[62]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text.RCC_APB2PeriphResetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[bc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, misc.o(.text.SysTick_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_Config
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timer.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = TIM2_IRQHandler &rArr; CanFly_Calcu_Position &rArr; mpu_get_euler_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Control
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_200HZ
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>TIMER_Config</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, timer.o(.text.TIMER_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIMER_Config &rArr; TIM_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_ARRPreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[ac]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>TIM_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[c5]"></a>TIM_DMACmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
</UL>

<P><STRONG><a name="[ae]"></a>TIM_DeInit</STRONG> (Thumb, 666 bytes, Stack size 80 bytes, stm32f10x_tim.o(.text.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
</UL>

<P><STRONG><a name="[aa]"></a>TIM_GetITStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>TIM_ITConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
</UL>

<P><STRONG><a name="[9e]"></a>TIM_OC1Init</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC1PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC1PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[9f]"></a>TIM_OC2Init</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a3]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC2PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC2PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a0]"></a>TIM_OC3Init</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a4]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC3PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC3PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a1]"></a>TIM_OC4Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a5]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_OC4PreloadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_OC4PreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[c8]"></a>TIM_SetCompare4</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_SetCompare4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_SetCompare4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
</UL>

<P><STRONG><a name="[c9]"></a>TIM_SetCounter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text.TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
</UL>

<P><STRONG><a name="[9d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 322 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[b2]"></a>USART1_Config</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, usart.o(.text.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>USART2_Config</STRONG> (Thumb, 376 bytes, Stack size 136 bytes, usart.o(.text.USART2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART2_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; CanFly_Decode &rArr; ano_data_decode &rArr; ano_data_check
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Decode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USART_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[bb]"></a>USART_DMACmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text.USART_DMACmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
</UL>

<P><STRONG><a name="[b3]"></a>USART_DeInit</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_DeInit &rArr; RCC_APB1PeriphResetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[b7]"></a>USART_GetITStatus</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32f10x_usart.o(.text.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>USART_ITConfig</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f10x_usart.o(.text.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[b4]"></a>USART_Init</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[b8]"></a>USART_ReceiveData</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, stm32f10x_usart.o(.text.USART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>WS2812B_Blink</STRONG> (Thumb, 442 bytes, Stack size 112 bytes, led.o(.text.WS2812B_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = WS2812B_Blink &rArr; WS2812B_Color &rArr; WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Color
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Yellow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Dark
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Red
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>WS2812B_Color</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, led.o(.text.WS2812B_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = WS2812B_Color &rArr; WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Blink
</UL>

<P><STRONG><a name="[c4]"></a>WS2812B_Config</STRONG> (Thumb, 264 bytes, Stack size 112 bytes, led.o(.text.WS2812B_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WS2812B_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>WS2812B_Dark</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, led.o(.text.WS2812B_Dark))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WS2812B_Dark &rArr; WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Blink
</UL>

<P><STRONG><a name="[bf]"></a>WS2812B_Red</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, led.o(.text.WS2812B_Red))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WS2812B_Red &rArr; WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Blink
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>WS2812B_Reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, led.o(.text.WS2812B_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
</UL>

<P><STRONG><a name="[c3]"></a>WS2812B_Show</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, led.o(.text.WS2812B_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Color
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Yellow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Dark
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Red
</UL>

<P><STRONG><a name="[c2]"></a>WS2812B_Write_24Bits</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, led.o(.text.WS2812B_Write_24Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WS2812B_Write_24Bits &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Color
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Yellow
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Dark
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Red
</UL>

<P><STRONG><a name="[c1]"></a>WS2812B_Yellow</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, led.o(.text.WS2812B_Yellow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WS2812B_Yellow &rArr; WS2812B_Show &rArr; WS2812B_Reset &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Show
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Write_24Bits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Blink
</UL>

<P><STRONG><a name="[ca]"></a>ano_data_check</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, protocol.o(.text.ano_data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ano_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_decode
</UL>

<P><STRONG><a name="[cf]"></a>ano_data_check_fill</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, protocol.o(.text.ano_data_check_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ano_data_check_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_flymode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_pwm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_rgb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_ctrl_euler_arc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_isensor
</UL>

<P><STRONG><a name="[6f]"></a>ano_data_decode</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, protocol.o(.text.ano_data_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ano_data_decode &rArr; ano_data_check
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_get_s16bit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_get_u8bit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Decode
</UL>

<P><STRONG><a name="[d0]"></a>ano_data_fill_s16bit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, protocol.o(.text.ano_data_fill_s16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ano_data_fill_s16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_ctrl_euler_arc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_isensor
</UL>

<P><STRONG><a name="[ce]"></a>ano_data_fill_u16bit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, protocol.o(.text.ano_data_fill_u16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ano_data_fill_u16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_pwm
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_ctrl_euler_arc
</UL>

<P><STRONG><a name="[d1]"></a>ano_data_fill_u8bit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, protocol.o(.text.ano_data_fill_u8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ano_data_fill_u8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_flymode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_rgb
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_isensor
</UL>

<P><STRONG><a name="[cb]"></a>ano_data_get_s16bit</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, protocol.o(.text.ano_data_get_s16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ano_data_get_s16bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_decode
</UL>

<P><STRONG><a name="[cc]"></a>ano_data_get_u8bit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, protocol.o(.text.ano_data_get_u8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ano_data_get_u8bit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_decode
</UL>

<P><STRONG><a name="[7b]"></a>ano_data_make_bat</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, protocol.o(.text.ano_data_make_bat))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ano_data_make_bat &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u16bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[77]"></a>ano_data_make_ctrl_euler_arc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, protocol.o(.text.ano_data_make_ctrl_euler_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ano_data_make_ctrl_euler_arc &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_s16bit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u16bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[76]"></a>ano_data_make_euler_arc</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, protocol.o(.text.ano_data_make_euler_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ano_data_make_euler_arc &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_s16bit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u8bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[7a]"></a>ano_data_make_flymode</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, protocol.o(.text.ano_data_make_flymode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ano_data_make_flymode &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u8bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[cd]"></a>ano_data_make_head</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, protocol.o(.text.ano_data_make_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_bat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_flymode
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_pwm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_rgb
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_ctrl_euler_arc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_euler_arc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_isensor
</UL>

<P><STRONG><a name="[75]"></a>ano_data_make_isensor</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, protocol.o(.text.ano_data_make_isensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ano_data_make_isensor &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_s16bit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u8bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[79]"></a>ano_data_make_pwm</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, protocol.o(.text.ano_data_make_pwm))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ano_data_make_pwm &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u16bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[78]"></a>ano_data_make_rgb</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, protocol.o(.text.ano_data_make_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ano_data_make_rgb &rArr; ano_data_check_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_fill_u8bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_check_fill
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ano_data_make_head
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Upload
</UL>

<P><STRONG><a name="[93]"></a>delay_ms</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_offset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[c7]"></a>delay_us</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, delay.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Reset
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; USART2_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Blink
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_2HZ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Blink
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Bat
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_10HZ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Red
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS2812B_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Config
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Parm_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Config
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[95]"></a>mpu6050_offset</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, mpu6050.o(.text.mpu6050_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mpu6050_offset &rArr; mpu_get_sensor_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[69]"></a>mpu_get_euler_angle</STRONG> (Thumb, 1708 bytes, Stack size 432 bytes, mpu6050.o(.text.mpu_get_euler_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = mpu_get_euler_angle &rArr; atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
</UL>

<P><STRONG><a name="[68]"></a>mpu_get_sensor_data</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, mpu6050.o(.text.mpu_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpu_get_sensor_data &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFly_Calcu_Position
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu6050_offset
</UL>

<P><STRONG><a name="[d9]"></a>mpu_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mpu6050.o(.text.mpu_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_read &rArr; IIC_READ &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sensor_data
</UL>

<P><STRONG><a name="[92]"></a>mpu_read_byte</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(.text.mpu_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_read_byte &rArr; IIC_READ_BYTE &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_READ_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[94]"></a>mpu_write_byte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(.text.mpu_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = mpu_write_byte &rArr; IIC_WRITE_BYTE &rArr; IIC_WAIT_ACK &rArr; IIC_STOP &rArr; IIC_HALF_DELAY
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WRITE_BYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[e1]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[da]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[dd]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[df]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e0]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[d7]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
</UL>

<P><STRONG><a name="[e3]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[d8]"></a>atan2</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
</UL>

<P><STRONG><a name="[e2]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a8]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a9]"></a>SetSysClockTo72</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[d2]"></a>invSqrt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, mpu6050.o(.text.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = invSqrt &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_euler_angle
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
